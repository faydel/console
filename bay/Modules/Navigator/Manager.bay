/*!
 *  Faydel Development Console
 *
 *  (c) Copyright 2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace FaydelConsole.Modules.Navigator;

use Runtime.RuntimeUtils;
use Core.Components.ContextMenu.ContextMenuItemClickEvent;
use Core.Components.Tree.TreeItem;
use Core.Components.Tree.TreeItemSelectEvent;
use Core.Components.Tree.TreeItemContextMenuEvent;
use Core.Components.Tree.TreeItemDoubleClickEvent;
use Core.Components.Tree.TreeModel;
use Core.FileSystem.FileNode;
use Core.Http.ApiRequest;
use Core.UI.UIController;
use Core.UI.Annotations.BindValue;
use Core.UI.Annotations.BindModel;
use Core.UI.Annotations.Event;
use Core.UI.Annotations.EventAsync;
use Core.UI.Events.MouseEvent.MouseClickEvent;
use Core.UI.Events.MouseEvent.MouseContextMenuEvent;
use Core.UI.Events.UserEvent.ChangeEvent;
use Core.UI.Render.CoreManager;
use FaydelConsole.Modules.Navigator.Model;
use FaydelConsole.Modules.Navigator.NavigatorItem;


class Manager extends CoreManager
{
	public Model model;
	
	
	
	
	/* Controller console_main */
	
	@Event{ "event": classof MouseClickEvent, "method_name": "onConsoleMainClick" }
	@Event{ "event": classof MouseContextMenuEvent, "method_name": "onConsoleMainContextMenu" }
	public assignable UIController console_main = new UIController();
	
	
	/**
	 * Main click
	 */
	public void onConsoleMainClick(MouseClickEvent event)
	{
		ContextMenuModel navigator_menu = this.model.navigator_menu;
		navigator_menu <= is_active <= false;
		this.updateModel({
			"navigator_menu": navigator_menu,
		});
	}
	
	
	
	/**
	 * Main context menu
	 */
	public void onConsoleMainContextMenu(MouseContextMenuEvent event)
	{
		/*event.cancel();*/
	}
	
	
	
	/* Controller editor */
	@BindModel{ "model": "editor" }
	public assignable UIController editor = new UIController();
	
	
	
	/* Controller navigator */
	
	
	@BindModel{ "model": "navigator" }
	@Event{ "event": classof TreeItemContextMenuEvent, "method_name": "onItemContextMenu" }
	@EventAsync{ "event": classof TreeItemDoubleClickEvent, "method_name": "onItemDoubleClick" }
	public assignable UIController navigator = new UIController();
	
	
	
	/**
	 * Reload navigation
	 */
	public async void onItemDoubleClick(TreeItemDoubleClickEvent event)
	{
		
		/* Get path */
		Collection<int> path = TreeModel::splitPath(event.path);
		
		/* Check is folder */
		TreeModel navigator = this.model.navigator;
		NavigatorItem item = TreeModel::getTreeItem(navigator, path);
		if (item.kind != NavigatorItem::KIND_FOLDER) 
		{
			await static::reloadFile(path);
		}
		else
		{
			await static::reloadFolder(path);
		}
		
		
	}
	
	
	
	/**
	 * Reload folder by path
	 */
	public async void reloadFolder(Collection<int> path)
	{
		/* Get folder path */
		string path_str = "/" ~ TreeModel::getNamePath(this.model.navigator, path);
		
		/* Call api */
		ApiResult res = await ApiRequest::callApi(
			"FaydelConsole.Api.Navigator",
			"Core.FileSystem.FileTransferInterface",
			"getDirectoryListing",
			{
				"path": path_str,
			}
		);
		
		if (res.code == 1)
		{
			/* Update item */
			TreeModel navigator = this.model.navigator;
			NavigatorItem item = TreeModel::getTreeItem(navigator, path);
			item = item.copy({
				"items": NavigatorItem::convertFileNodes(res.result),
				"is_open": true,
			});
			navigator = TreeModel::setTreeItem(navigator, path, item);
			
			/* Update model */
			this.updateModel({
				"navigator": navigator
			});
		}
	}
	
	
	
	/**
	 * Reload file by path
	 */
	public async void reloadFile(Collection<int> path)
	{
		/* Get folder path */
		string path_str = "/" ~ TreeModel::getNamePath(this.model.navigator, path);
		int offset = 0;
		int filesize = -1;
		Vector<byte> content = new Vector();
		
		/* Load file content */
		while (filesize == -1 or offset < filesize)
		{
			
			ApiResult res = await ApiRequest::callApi(
				"FaydelConsole.Api.Navigator",
				"Core.FileSystem.FileTransferInterface",
				"readBlock",
				{
					"path": path_str,
					"offset": offset,
				}
			);
			
			if (res.code != 1) break;
			
			offset += res.result.count;
			filesize = res.result.size;
			content.appendVector(res.result.bytes);
			
			if (res.result.eof) break;
		}
		
		string s = RuntimeUtils::bytesToString(content);
		/*rtl::dump(s);*/
		
		/* Update Model */
		EditorModel editor = this.model.editor;
		editor <= path <= path;
		editor <= content <= s;
		this.updateModel({
			"editor": editor
		});
	}
	
	
	
	/**
	 * Reload navigation
	 */
	public void onItemContextMenu(TreeItemContextMenuEvent e)
	{
		e.event.cancel();
		
		ContextMenuModel navigator_menu = this.model.navigator_menu;
		navigator_menu = navigator_menu.copy({
			"is_active": true,
			"x": e.event.clientX,
			"y": e.event.clientY,
		});
		
		
		TreeModel navigator = this.model.navigator;
		navigator <= selected <= e.path;
		this.updateModel({
			"navigator": navigator,
			"navigator_menu": navigator_menu,
		});
		
	}
	
	
	
	
	
	/* Controller navigator_menu */
	
	
	@Event{ "event": classof ContextMenuItemClickEvent, "method_name": "onNavigatorMenuClick" }
	public assignable UIController navigator_menu = new UIController();
	
	
	
	/**
	 * Navigation manu item click
	 */
	public void onNavigatorMenuClick(ContextMenuItemClickEvent e)
	{
		e.event.cancel();
		
		console.log(e.tag);
		
		ContextMenuModel navigator_menu = this.model.navigator_menu;
		navigator_menu <= is_active <= false;
		this.updateModel({
			"navigator_menu": navigator_menu,
		});
	}
	
	
	
	
	/* Controller reload_button */
	
	@EventAsync{ "event": classof MouseClickEvent, "method_name": "onReload" }
	public assignable UIController reload_button = new UIController();
	
	
	
	/**
	 * Reload navigation
	 */
	public async void onReload(MouseClickEvent e)
	{
		
		ApiResult res = await ApiRequest::callApi(
			"FaydelConsole.Api.Navigator",
			"Core.FileSystem.FileTransferInterface",
			"getDirectoryListing",
			{}
		);
		
		/* Update navigator */
		TreeModel navigator = this.model.navigator;
		navigator <= items <= NavigatorItem::convertFileNodes(res.result);
		this.updateModel({
			"navigator": navigator
		});
	}
	
	
	
	/* Controller save_button */
	
	@EventAsync{ "event": classof MouseClickEvent, "method_name": "onSave" }
	public assignable UIController save_button = new UIController();
	
	
	
	/**
	 * Reload navigation
	 */
	public async void onSave(MouseClickEvent e)
	{
		EditorModel editor = this.model.editor;
		string path_str = "/" ~ TreeModel::getNamePath(this.model.navigator, editor.path);
		Collection<byte> content = RuntimeUtils::stringToBytes(editor.content);
		
		
		int offset = 0;
		int filesize = content.count();
		int count = 1048576;
		
		
		/* Create and clear file */
		ApiResult res = await ApiRequest::callApi(
			"FaydelConsole.Api.Navigator",
			"Core.FileSystem.FileTransferInterface",
			"createNode",
			{
				"path": path_str,
				"kind": FileNode::KIND_FILE,
				"clear": true,
			}
		);
		
		if (res.code == 1)
		{
			/* Save file content */
			while (offset < filesize)
			{
				
				ApiResult res = await ApiRequest::callApi(
					"FaydelConsole.Api.Navigator",
					"Core.FileSystem.FileTransferInterface",
					"writeBlock",
					{
						"path": path_str,
						"offset": offset,
						"bytes": content.slice(offset, count),
					}
				);
				
				if (res.code != 1) break;
				if (res.result.count == 0) break;
				
				offset += res.result.count;
			}
		}
		
	}
	
}