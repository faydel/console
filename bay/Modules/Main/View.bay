/*!
 *  Bayrell Development Console
 *
 *  (c) Copyright 2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace BayrellConsole.Modules.Main;

use Core.UI.Render.CoreView;
use BayrellConsole.Models.NavigatorItem;
use BayrellConsole.Modules.Main.Assets;
use BayrellConsole.Modules.Main.Manager;
use BayrellConsole.Modules.Main.Model;
use Core.Components.Tabs.Tabs;
use Core.Components.Tree.Tree;
use Core.Components.ContextMenu.ContextMenu;
use Core.Components.ContextMenu.ContextMenuItem;


struct View extends CoreView
{
	
	
	/**
	 * Returns manager name
	 */
	lambda string managerName() => classof Manager;
	
	
	
	/**
	 * Returns model name
	 */
	lambda string modelName() => classof Model;
	
	
	
	/**
	 * Required Assets
	 */
	lambda Collection<string> assets() =>
		[
			classof Assets,
		]
	;
	
	
	
	/**
	 * Required components
	 */
	lambda Collection<string> components() =>
		[
			classof Tabs,
			classof Tree,
			classof ContextMenu,
		]
	;
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => 
		@css{
			%console_main{
				padding: 10px;
				min-height: 100vh;
			}
			%console_left, %console_workspace{
				display: inline-block;
				vertical-align: top;
			}
			%console_left{
				width: 300px;
			}
			%console_workspace{
				width: calc(100% - 300px);
			}
			%console_main %(Tree)tree_icon{
				color: slateblue;
			}
		}
	;
	
	
	
	/**
	 * Returns icon by item
	 */
	pure string getIcon(NavigatorItem item)
	{
		if (item.kind == NavigatorItem::KIND_FOLDER)
		{
			if (item.is_open) return "fa fa-folder-open";
			return "fa fa-folder";
		}
		if (item.kind == NavigatorItem::KIND_FILE) return "fa fa-file";
		return "";
	}
	/* public static callback getIcon = method static::getIcon; */
	
	
	/**
	 * Component render
	 */
	lambda Collection<UIStruct> render(Model data, Collection<UIStruct> children) =>
		
		<div @key='main' @class='console_main' @control='console_main'>
			
			<div @class='console_left'>
				<button @control='reload_button'>Reload</button>
				<Tree @model={ data.navigator } @key='navigator' @control='navigator' 
					get_icon={ method static::getIcon }></Tree>
			</div>
			<div @class='console_workspace'>
				<Tabs>
					{ static::renderWorkspaceTabs(data) }
				</Tabs>
			</div>
			
		</div>
		<ContextMenu @model={ data.navigator_menu } @key="navigator_menu" @control="navigator_menu">
			{ static::renderContextMenuItems(data) }
		</ContextMenu>
	;
	
	
	
	/**
	 * Render context menu items
	 */
	pure Collection<UIStruct> renderContextMenuItems(Model data)
	{
		return 
			<ContextMenuItem icon='fa fa-cogs' tag='create_component'>Создать компонент</ContextMenuItem>
			<ContextMenuItem icon='fa fa-trash' tag='delete_component'>Удалить</ContextMenuItem>
		;
	}
	
	
	
	/**
	 * Render workspace
	 */
	pure Collection<UIStruct> renderWorkspaceTabs(Model data)
	{
		Collection<UIStruct> res = new Collection();
		return res;
	}
	
}
