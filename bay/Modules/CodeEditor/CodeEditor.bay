/*!
 *  Faydel Development Console
 *
 *  (c) Copyright 2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace FaydelConsole.Modules.CodeEditor;

use Core.UI.Render.CoreView;
use Core.Components.Tabs.Tabs;
use Core.Components.Tabs.TabsItem;
use Core.Components.Tree.Tree;
use Core.Components.Tree.TreeModel;
use Core.Components.ContextMenu.ContextMenu;
use Core.Components.ContextMenu.ContextMenuItem;
use Core.Components.Navigator.Navigator;
use Core.Components.Navigator.NavigatorItem;
use FaydelConsole.Modules.CodeEditor.CodeEditorAssets;
use FaydelConsole.Modules.CodeEditor.CodeEditorManager;
use FaydelConsole.Modules.CodeEditor.CodeEditorModel;
use FaydelConsole.Modules.CodeEditor.Editor.Editor;
use FaydelConsole.Modules.CodeEditor.Editor.EditorModel;


struct CodeEditor extends CoreView
{
	
	
	/**
	 * Returns manager name
	 */
	lambda string managerName() => classof CodeEditorManager;
	
	
	
	/**
	 * Returns model name
	 */
	lambda string modelName() => classof CodeEditorModel;
	
	
	
	/**
	 * Required Assets
	 */
	lambda Collection<string> assets() =>
		[
			classof CodeEditorAssets,
		]
	;
	
	
	
	/**
	 * Required components
	 */
	lambda Collection<string> components() =>
		[
			classof Tabs,
			classof Tree,
			classof Navigator,
			classof Editor,
		]
	;
	
	
	
	/**
	 * Component css
	 */
	lambda string css(Dict<string> vars) => 
		@css{
			%console_main{
				padding: 0px;
				height: 100vh;
				width: 100%;
			}
			%console_menu{
				display: flex;
				flex-direction: row;
				justify-content: flex-start;
				align-items: center;
				height: 25px;
			}
			%console_content{
				display: table;
				width: 100%;
				height: calc(100% - 25px);
			}
			%console_left, %console_workspace{
				display: table-cell;
				vertical-align: top;
				height: 100%;
			}
			%console_left{
				position: relative;
				width: 300px;
			}
			%console_left %(Tree)tree{
				overflow: auto;
				height: calc(100% - 21px);
			}
			%console_workspace{
				position: relative;
			}
			%console_main %(Tree)tree_icon{
				color: slateblue;
			}
			%(Editor)console_editor{
				height: calc(100vh - 55px);
			}
		}
	;
	
	
	
	
	/**
	 * Component render
	 */
	lambda Collection<UIStruct> render(Model data, Collection<UIStruct> children) =>
		
		<div @key='main' @class='console_main' @control='console_main'>
			<div @class='console_menu'>
				<button @control='reload_button'>Reload</button>
				<button @control='save_button'>Save</button>
			</div>
			<div @class='console_content'>
				<div @class='console_left'>
					<Tree @model={ data.navigator } @control='navigator'></Tree>
				</div>
				<div @class='console_workspace'>
					{ static::renderWorkspace(data) }
				</div>
			</div>
		</div>
	;
	
	
	
	/**
	 * Render workspace
	 */
	pure Collection<UIStruct> renderWorkspace(Model data)
	{
		/* Find position by current_open_path */
		int active_pos = CodeEditorModel::getOpenEditorPos(data);
		
		mixed active_tag = null;
		if (active_pos >= 0)
		{
			active_tag = data.editors.item(active_pos);
		}
		
		return 
			<Tabs active={ "tab"~active_pos } @control='tabs'>
				{ data.editors.map( 
					lambda Collection<UIStruct> (EditorModel item, int index) =>
						<TabsItem key={ "tab"~index } title={ EditorModel::getTabTitle(item) } tag={ item }>
							<Editor @model={ item } @control='editor' index={ index }  path={ item.path_str }></Editor>
						</TabsItem>
				) }
			</Tabs>
		;
	}
	
	
}
