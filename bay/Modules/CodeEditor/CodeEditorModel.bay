/*!
 *  Faydel Development Console
 *
 *  (c) Copyright 2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
 
namespace FaydelConsole.Modules.CodeEditor;

use Runtime.CoreStruct;
use Core.Components.ContextMenu.ContextMenuModel;
use Core.Components.Navigator.NavigatorItem;
use Core.Components.Navigator.NavigatorModel;
use Core.Components.Tree.TreeItem;
use Core.Components.Tree.TreeModel;
use Core.FileSystem.FileNode;
use FaydelConsole.Modules.CodeEditor.Editor.EditorModel;


struct CodeEditorModel extends CoreStruct
{
	
	public NavigatorModel navigator = new NavigatorModel();
	public Collection<EditorModel> editors = new Collection<EditorModel>();
	public int current_max_id = 0;
	public int current_open_id = -1;
	
	
	
	/**
	 * Returns open editor
	 * @param Model model
	 */
	pure int getOpenEditorPos(Model model)
	{
		/* Find position by path */
		int pos = model.editors.find(
			lambda bool (EditorModel editor, int id) => editor.id == id,
			model.current_open_id
		);
		
		return pos;
	}
	
	
	
	/**
	 * Returns open editor
	 * @param Model model
	 */
	pure EditorModel getOpenEditor(Model model)
	{
		/* Find position by path */
		int pos = model.editors.find(
			lambda bool (EditorModel editor, int id) => editor.id == id,
			model.current_open_id
		);
		
		if (pos == -1) return null;
		return model.editors.get(pos, null);
	}
	
	
	
	/**
	 * Open editor
	 */
	pure Model openEditor(Model model, string path_str, string content)
	{
		int current_open_id = model.current_open_id;
		
		/* Find position by path */
		int pos = model.editors.find(
			lambda bool (EditorModel editor, string path_str) => editor.path_str == path_str,
			path_str
		);
		
		if (pos == -1)
		{
			int editor_id = model.current_max_id;
			EditorModel editor = new EditorModel
			{ 
				"id": editor_id, 
				"path_str": path_str, 
				"content": content
			};
			model = model.copy({
				"current_max_id": model.current_max_id + 1,
				"current_open_id": editor_id,
				"editors": model.editors.appendIm(editor),
			});
		}
		else
		{
			EditorModel editor = model.editors.item(pos).copy({ "content": content });
			model = model.copy({
				"current_open_id": editor.id,
				"editors": model.editors.setIm(pos, editor),
			});
		}
		
		return model;
	}
	
}