/*!
 *  Faydel Development Console
 *
 *  (c) Copyright 2019 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace FaydelConsole.Api;

use Runtime.CoreStruct;
use Runtime.RuntimeConstant;
use Core.Backend.BackendProvider;
use Core.FileSystem.FileIOResult;
use Core.FileSystem.FileNode;
use Core.FileSystem.FileSystemInterface;
use Core.Http.ApiRequest;
use Core.Http.ApiResult;
use Core.UI.Annotations.ApiMethod;
use FaydelConsole.Models.NavigatorItem;


class Navigator extends CoreStruct
{
	
	/**
	 * Returns base path
	 */
	static string getBasePath(ContextInterface context)
	{
		BackendProvider app = context.getValue("default.app");
		return app.base_path;
	}
	
	
	
	/**
	 * Returns files and folders from directory
	 * @param string path
	 * @return Collection<FileNode>
	 */
	@ApiMethod
	{ 
		"space": "Core.FileSystem.FileTransferInterface",
		"name": "getDirectoryListing"
	} 
	public static async ApiResult loadTree(ContextInterface context, ApiRequest req)
	{
		string base_path = static::getBasePath(context);
		string path = req.data.get("path", "", "string");
		FileSystemInterface fs = context.get("provider.default.fs");
		Collection<string> arr = await fs.getDirectoryListing(base_path ~ "/lib" ~ path);
		Collection<FileNode> items = [];
		
		for (int i=0; i<arr.count(); i++)
		{
			string kind = FileNode::KIND_FILE;
			string name = arr.item(i);
			bool is_folder = await fs.isDir(base_path ~ "/lib" ~ path ~ "/" ~ name);
			if (is_folder) kind = FileNode::KIND_FOLDER;
			
			items.push(
				new FileNode{
					"name": name,
					"kind": kind,
					"items": null
				}
			);
		}
		
		/* Send result */
		ApiResult res = new ApiResult();
		res <= result <= items;
		return ApiResult::setError(res, RuntimeConstant::ERROR_OK, "Ok");
	}
	
	
	
	/**
	 * Returns files stat
	 * @param Collection<string> items
	 * @return Collection<FileStat>
	 */
	@ApiMethod
	{ 
		"space": "Core.FileSystem.FileTransferInterface",
		"name": "stat"
	} 
	public static async ApiResult stat(ContextInterface context, ApiRequest req)
	{
	
		/* Send result */
		return ApiResult::setError(new ApiResult{ "result": result }, RuntimeConstant::ERROR_OK, "Ok");
	}
	
	
	
	/**
	 * Create new node
	 * @param string path
	 * @param string name
	 * @param string kind
	 * @return bool
	 */
	@ApiMethod
	{ 
		"space": "Core.FileSystem.FileTransferInterface",
		"name": "createNode"
	} 
	public static async ApiResult createNode(ContextInterface context, ApiRequest req)
	{
		
		string base_path = static::getBasePath(context);
		string path = req.data.get("path", "", "string");
		string kind = req.data.get("kind", "", "string");
		string clear = req.data.get("clear", false, "bool");
		
		/* Create file */
		FileSystemInterface fs = context.get("provider.default.fs");
		FileIOResult result = await fs.createNode(base_path ~ "/lib" ~ path, kind, {"clear": clear});
		
		/* Send result */
		return ApiResult::setError(new ApiResult{ "result": result }, RuntimeConstant::ERROR_OK, "Ok");
	}
	
	
	
	/**
	 * Read file
	 * @param string path
	 * @param int offset
	 * @param int count
	 * @param string charset
	 * @return FileIOResult
	 */
	@ApiMethod
	{ 
		"space": "Core.FileSystem.FileTransferInterface",
		"name": "readBlock"
	} 
	public static async ApiResult readBlock(ContextInterface context, ApiRequest req)
	{
		string base_path = static::getBasePath(context);
		string path = req.data.get("path", "", "string");
		int offset = req.data.get("offset", 0, "int");
		int count = req.data.get("count", -1, "int"); 
		string content = "";
		
		/* Read block */
		FileSystemInterface fs = context.get("provider.default.fs");
		FileIOResult result = await fs.readBlock(base_path ~ "/lib" ~ path, offset, count);
		result <= name <= path;
		
		/* Send result */
		return ApiResult::setError(new ApiResult{ "result": result }, RuntimeConstant::ERROR_OK, "Ok");
	}
	
	
	
	/**
	 * Write file
	 * @param string path
	 * @param string content
	 * @param int offset
	 * @param string charset
	 * @return FileIOResult
	 */
	@ApiMethod
	{ 
		"space": "Core.FileSystem.FileTransferInterface",
		"name": "writeBlock"
	} 
	public static async ApiResult writeBlock(ContextInterface context, ApiRequest req)
	{
		string base_path = static::getBasePath(context);
		string path = req.data.get("path", "", "string");
		int offset = req.data.get("offset", 0, "int");
		Collection<byte> bytes = req.data.get("bytes", null, classof Collection);
		
		/* Save block */
		FileSystemInterface fs = context.get("provider.default.fs");
		FileIOResult result = await fs.writeBlock(base_path ~ "/lib" ~ path, bytes, offset, -1);
		result <= name <= path;
		
		/* Send result */
		return ApiResult::setError(new ApiResult{ "result": result }, RuntimeConstant::ERROR_OK, "Ok");
	}
	
	
	
	
}
